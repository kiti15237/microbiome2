source('~/Lab/16S/scripts/deleteDiffs.R')
install.packages("optparse")
source('~/Lab/16S/scripts/deleteDiffs.R')
vectorized1
length(vectorized1)
seq(1,length(vectorized1), by=4)
seq(1,length(vectorized2), by=4)
length(vectorized2)
vectorized2
cleanH2
file2
f2
f1
source('~/Lab/16S/scripts/linear_logistic_regression_new.R')
install.packages("glmnet")
source('~/Lab/16S/scripts/linear_logistic_regression_new.R')
source('~/Lab/16S/scripts/linear_logistic_regression_new.R')
source('~/Lab/16S/scripts/linear_logistic_regression_new.R')
source('~/Lab/16S/scripts/linear_logistic_regression_new.R')
import(biom)
?import_biom
biom <-import_biom("~/Lab/16S/otuTables/open_oct/filtered_otu_table_normCSS.biom")
source('~/Lab/16S/scripts/linear_logistic_regression_new.R')
table <- otu_table(biom, taxa_are_rows = T)
table <- formatTable(table)
return(table)
source('~/Lab/microbiome2/scripts/getTables.R')
source('~/Lab/16S/scripts/linear_logistic_regression_new.R')
source('~/Lab/16S/scripts/linear_logistic_regression_new.R')
mapping <- getMapping()
table<- getOtuTable()
tTable <- t(table)
#filter out those variables that are present in less than opt$filter samples
opt$filter <- 10
if(!is.null(opt$filter)){
print(paste("filtered to ", opt$filter, " samples"))
toRemove <- apply(tTable, 1, function(r) return(sum(r==0) > length(r) - opt$filter))
filtered_table <- tTable[-toRemove, ]
}
source('~/Lab/16S/scripts/linear_logistic_regression_new.R')
source('~/Lab/16S/scripts/linear_logistic_regression_new.R')
mapping
mapping$SampleID == 386
(mapping$SampleID == 386)
sum(mapping$SampleID == 386)
sample(10)
1:3
source('~/Lab/16S/scripts/linear_logistic_regression.R')
source('~/Lab/16S/scripts/linear_logistic_regression.R')
source("~/Lab/microbiome2/scripts/getTables.R")
mapping <- getMapping()
table <- getOtuTable()
iterations <- 20
accuracy <- 0
alpha <- 1
lambda <- 0.1
glmnet_family <- "binomial"
relevantVars <- c()
temp <- splitAutControl(table, mapping)
aut <- temp[[1]]
control <- temp[[2]]
autMap <- temp[[3]]
cMap <- temp[[4]]
aut = t(aut)
control = t(control)
aut
for(iter in seq(1:iterations)){
aut_order = sample(nrow(aut))
aut_shuffle <- aut[aut_order, ] #randomizes order
autMap_shuffle <- autMap[aut_order, ] #keeps map in that same order
control_order = sample(nrow(control))
control_shuffle <- control[control_order, ] #randomizes order
cMap_shuffle <- cMap[control_order, ] # keeps map in that same order
aut_train = aut_shuffle[1: nrow(aut) * 2 / 3, ]
control_train = control_shuffle[1:nrow(control) * 2 / 3, ]
aut_test = aut_shuffle[nrow(aut) * 2/3 + 1, nrow(aut), ]
control_test = control_shuffle[nrow(control) * 2/3 + 1, nrow(control), ]
train <- as.data.frame(rbind(aut_train, control_train))
test <- as.data.frame(rbind(aut_test, control_test))
results <- regression2(train, test, glmnet_family=glmnet_family, alpha = alpha, lambda = lambda)
print(results)
accuracy <- accuracy + results
# globalAccuracy <- globalAccuracy + (results$accuracy)
#if(length(relevantVars) == 0){
#  relevantVars = unique(results$relevantVars)
#}else{
#  relevantVars <- relevantVars[relevantVars %in% results$relevantVars]
#}
#  relevantVars <- c(relevantVars, unique(results$relevantVars))
}
#output accuracy
print(table(relevantVars)[order(table(relevantVars))])
cat("Alpha: ", alpha, "\n")
source('~/Lab/16S/scripts/linear_logistic_regression.R')
debugSource('~/Lab/16S/scripts/linear_logistic_regression.R')
debugSource('~/Lab/16S/scripts/linear_logistic_regression.R')
train
aut_train
rownames(aut)
rownames(aut_train)
sample(nrow(aut))
sample(nrow(aut), replace = F)
rownames(aut_train)
rownamesaut_shuffle
rownames(aut_shuffle)
length(rownames(aut_shuffle))
1: nrow(aut) * 2 / 3
nrow(aut) * 2 / 3
debugSource('~/Lab/16S/scripts/linear_logistic_regression.R')
mapping$SampleID
mapping$SampleID[match(rownames(training), mapping$SampleID)]
mapping$SampleID[match(rownames(training), mapping$SampleID)] == rownames(training)
source('~/Lab/16S/scripts/linear_logistic_regression.R')
debugSource('~/Lab/16S/scripts/linear_logistic_regression.R')
nrow(training)
ncol(training)
length(categories_train)
lambda
debugSource('~/Lab/16S/scripts/linear_logistic_regression.R')
cvfit
nrow(testing)
testing
source('~/Lab/16S/scripts/linear_logistic_regression.R')
debugSource('~/Lab/16S/scripts/linear_logistic_regression.R')
(nrow(aut) * 2/3) + 1
(nrow(aut) * 2/3) + 1: nrow(aut)
aut_shuffle[(nrow(aut) * 2/3) + 1: nrow(aut), ]
aut_shuffle[(nrow(aut) * 2/3) + 1: nrow(aut)-1, ]
nrow(aut)
4:6
(nrow(aut) * 2/3)
(nrow(aut) * 2/3) + 1
((nrow(aut) * 2/3) + 1): nrow(aut)
debugSource('~/Lab/16S/scripts/linear_logistic_regression.R')
source('~/Lab/16S/scripts/linear_logistic_regression.R')
vars <- paste("x",rownames(table), sep="")
rownames(table) <- vars
mapping$binary <- as.factor(ifelse(mapping$classifier < 0, 1, 0))
tTable <- t(table)
tTable_info <- data.frame(cbind(tTable, mapping))
tTable_info$Treatment <- as.factor(tTable_info$Treatment)
formula <- as.formula(paste("binary ~ ", paste(vars[1:25], collapse='+')))
fit <- glm(formula, data=tTable_info, family=binomial)
stats::predict(fit)
plot(df$classifier, col="red", ylim=c(-9, 9))
par(new=TRUE)
plot(df$predicted, col="blue", add=T, ylim=c(-9, 9))
source('~/Lab/16S/scripts/linear_logistic_regression.R')
source('~/Lab/16S/scripts/linear_logistic_regression.R')
source('~/Lab/16S/scripts/linear_logistic_regression.R')
source('~/Lab/16S/scripts/linear_logistic_regression.R')
source('~/Lab/16S/scripts/linear_logistic_regression.R')
